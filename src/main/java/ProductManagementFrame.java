
import java.sql.Connection;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;


public class ProductManagementFrame extends JFrame {

    /**
     * Creates new form ProductManagementFrame
     */
    public ProductManagementFrame() {
        System.out.println("ProductManagementFrame Constructor Called!");  // âœ… Debugging
        initComponents();
        initialize();
        
    }
    private void initialize(){
        loadProducts();
}
     public void loadProducts() {
    DefaultTableModel model = (DefaultTableModel) productTable.getModel();
    
    if (model == null) {
        JOptionPane.showMessageDialog(this, "Error: Table model is null!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    model.setRowCount(0); // Clear existing data before loading new ones

    try (Connection conn = DatabaseConnection.getConnection();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT * FROM products")) {

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("name"),
                rs.getString("category"),
                rs.getDouble("price"),
                rs.getInt("stock")
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading products from database.\n" + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        btnAddProduct = new javax.swing.JButton();
        btnEditProduct = new javax.swing.JButton();
        btnDeleteProduct = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnSellProduct = new javax.swing.JButton();
        btnViewStatistics = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(252, 247, 248));

        jPanel1.setBackground(new java.awt.Color(252, 247, 248));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(163, 22, 33));
        jLabel2.setText("Product Management");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(29, 29, 29))
        );

        productTable.setBackground(new java.awt.Color(252, 247, 248));
        productTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product ID ", "Name", "Category", "Price ", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(2).setResizable(false);
        }

        btnAddProduct.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddProduct.setForeground(new java.awt.Color(163, 22, 33));
        btnAddProduct.setText("Add");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        btnEditProduct.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEditProduct.setForeground(new java.awt.Color(163, 22, 33));
        btnEditProduct.setText("Edit");
        btnEditProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditProductActionPerformed(evt);
            }
        });

        btnDeleteProduct.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeleteProduct.setForeground(new java.awt.Color(163, 22, 33));
        btnDeleteProduct.setText("Delete");
        btnDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProductActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBack.setForeground(new java.awt.Color(163, 22, 33));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSellProduct.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSellProduct.setForeground(new java.awt.Color(163, 22, 33));
        btnSellProduct.setText("Sale");
        btnSellProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellProductActionPerformed(evt);
            }
        });

        btnViewStatistics.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnViewStatistics.setForeground(new java.awt.Color(163, 22, 33));
        btnViewStatistics.setText("View");
        btnViewStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewStatisticsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnAddProduct)
                .addGap(18, 18, 18)
                .addComponent(btnEditProduct)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteProduct)
                .addGap(18, 18, 18)
                .addComponent(btnSellProduct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnViewStatistics)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewStatistics)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddProduct)
                    .addComponent(btnEditProduct)
                    .addComponent(btnDeleteProduct)
                    .addComponent(btnBack)
                    .addComponent(btnSellProduct))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog(this, "Enter Product Name:");
        String category = JOptionPane.showInputDialog(this, "Enter Category:");
        String priceStr = JOptionPane.showInputDialog(this, "Enter Price:");
        String stockStr = JOptionPane.showInputDialog(this, "Enter Stock:");
        
        if (name != null && category != null && priceStr != null && stockStr != null) {
        try {
            double price = Double.parseDouble(priceStr);
            int stock = Integer.parseInt(stockStr);

            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement ps = conn.prepareStatement("INSERT INTO products (name, category, price, stock) VALUES (?, ?, ?, ?)")) {

                ps.setString(1, name);
                ps.setString(2, category);
                ps.setDouble(3, price);
                ps.setInt(4, stock);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(this, "Product Added Successfully!");
                loadProducts(); // Refresh table
            }
        } catch (NumberFormatException | SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid input!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    }//GEN-LAST:event_btnAddProductActionPerformed

    private void btnEditProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditProductActionPerformed
        // TODO add your handling code here:
                                                    
    int selectedRow = productTable.getSelectedRow(); 

        if (selectedRow == -1) { 
            JOptionPane.showMessageDialog(null, "Please select a product to edit!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        int id = (int) model.getValueAt(selectedRow, 0); 

        // Get current values
        String currentName = (String) model.getValueAt(selectedRow, 1);
        String currentCategory = (String) model.getValueAt(selectedRow, 2);
        double currentPrice = (double) model.getValueAt(selectedRow, 3);
        int currentStock = (int) model.getValueAt(selectedRow, 4);

        // Input dialogs with default values
        String newName = JOptionPane.showInputDialog(null, "Enter New Name:", currentName);
        String newCategory = JOptionPane.showInputDialog(null, "Enter New Category:", currentCategory);
        String newPriceStr = JOptionPane.showInputDialog(null, "Enter New Price:", currentPrice);
        String newStockStr = JOptionPane.showInputDialog(null, "Enter New Stock:", currentStock);

        if (newName == null || newCategory == null || newPriceStr == null || newStockStr == null) {
            JOptionPane.showMessageDialog(null, "Edit cancelled!", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {
    double newPrice = Double.parseDouble(newPriceStr);
    int newStock = Integer.parseInt(newStockStr);

    // Update database
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement("UPDATE products SET name=?, category=?, price=?, stock=? WHERE id=?")) {

            ps.setString(1, newName);
            ps.setString(2, newCategory);
            ps.setDouble(3, newPrice);
            ps.setInt(4, newStock);
            ps.setInt(5, id);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(null, "Product Updated Successfully!");
            loadProducts(); 
           

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid input! Please enter numeric values for price and stock.", "Error", JOptionPane.ERROR_MESSAGE);
    } 


    }//GEN-LAST:event_btnEditProductActionPerformed

    private void btnDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProductActionPerformed
        // TODO add your handling code here:
         int selectedRow = productTable.getSelectedRow(); 

        if (selectedRow == -1) { 
            JOptionPane.showMessageDialog(null, "Please select a product to delete!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this product?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        int id = (int) model.getValueAt(selectedRow, 0); 

        // Delete from database
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement("DELETE FROM products WHERE id=?")) {

            ps.setInt(1, id);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(null, "Product Deleted Successfully!");
            loadProducts(); // Refresh table

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error!", "Error", JOptionPane.ERROR_MESSAGE);
        }
                                  
    }//GEN-LAST:event_btnDeleteProductActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         HomePageFrame homePage = new HomePageFrame(); 
         homePage.setVisible(true);

    // Close the current ProductManagementFrame
         this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSellProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellProductActionPerformed
        // TODO add your handling code here:
                                                
    // TODO add your handling code here:
    int selectedRow = productTable.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a product to sell!", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    DefaultTableModel model = (DefaultTableModel) productTable.getModel();
    int productId = (int) model.getValueAt(selectedRow, 0);
    String productName = (String) model.getValueAt(selectedRow, 1);
    double productPrice = (double) model.getValueAt(selectedRow, 3);
    int currentStock = (int) model.getValueAt(selectedRow, 4);

    String quantityStr = JOptionPane.showInputDialog(this, "Enter quantity to sell:");
    if (quantityStr == null) return; 

    try {
        int quantity = Integer.parseInt(quantityStr);

        if (quantity <= 0 || quantity > currentStock) {
            JOptionPane.showMessageDialog(this, "Invalid quantity!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double totalPrice = productPrice * quantity; // Correctly computing total price
        System.out.println("Total Price Computed: " + totalPrice); // Debugging: Print total price

        try (Connection conn = DatabaseConnection.getConnection()) {
            conn.setAutoCommit(false);

            // Insert into sales table
            String insertSaleSQL = "INSERT INTO sales (product_id, quantity, total_price) VALUES (?, ?, ?)";
            try (PreparedStatement ps = conn.prepareStatement(insertSaleSQL)) {
                ps.setInt(1, productId);
                ps.setInt(2, quantity);
                ps.setDouble(3, totalPrice);
                ps.executeUpdate();
            }

            // Update stock in products table
            String updateStockSQL = "UPDATE products SET stock = stock - ? WHERE id = ?";
            try (PreparedStatement ps = conn.prepareStatement(updateStockSQL)) {
                ps.setInt(1, quantity);
                ps.setInt(2, productId);
                ps.executeUpdate();
            }

            conn.commit();
            JOptionPane.showMessageDialog(this, "Sale completed for " + quantity + " x " + productName + 
                                          "\nTotal Price: $" + totalPrice); // Show total price
            loadProducts(); // Refresh product table

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error!", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input! Enter a number.", "Error", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_btnSellProductActionPerformed

    private void btnViewStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewStatisticsActionPerformed
        // TODO add your handling code here:
        loadProductStatistics();
    }//GEN-LAST:event_btnViewStatisticsActionPerformed
    private void loadProductStatistics() {
    try (Connection conn = DatabaseConnection.getConnection()) {
        String query = "SELECT " +
                       "COUNT(id) AS totalProducts, " + //aggregate
                       "ROUND(AVG(price), 2) AS avgPrice, " + //scalar at avrg
                       "MAX(price) AS maxPrice, " + //aggre
                       "MIN(price) AS minPrice " + //aggre
                       "FROM products"; 

        try (PreparedStatement ps = conn.prepareStatement(query);
             ResultSet rs = ps.executeQuery()) {

            if (rs.next()) {
                int totalProducts = rs.getInt("totalProducts");
                double avgPrice = rs.getDouble("avgPrice");
                double maxPrice = rs.getDouble("maxPrice");
                double minPrice = rs.getDouble("minPrice");

                // Display statistics in a message dialog
                JOptionPane.showMessageDialog(this,
                    "Product Statistics:\n" +
                    "Total Products: " + totalProducts + "\n" +
                    "Average Price: $" + avgPrice + "\n" +
                    "Most Expensive Product: $" + maxPrice + "\n" +
                    "Least Expensive Product: $" + minPrice,
                    "Product Statistics",
                    JOptionPane.INFORMATION_MESSAGE);
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading product statistics!", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    
  
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            ProductManagementFrame productFrame = new ProductManagementFrame();
            productFrame.setVisible(true);
            productFrame.loadProducts();  // âœ… Call after the UI is visible
            
       });
}



        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteProduct;
    private javax.swing.JButton btnEditProduct;
    private javax.swing.JButton btnSellProduct;
    private javax.swing.JButton btnViewStatistics;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable productTable;
    // End of variables declaration//GEN-END:variables
}


